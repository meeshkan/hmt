version: 2 # use CircleCI 2.0
workflows:
  version: 2
  test:
    jobs:
      - test-3.6
      - test-3.7
      - test-3.8
jobs: # A basic unit of work in a run
  test-3.6: &test-template
    build: # runs not using Workflows must have a `build` job as entry point
      # directory where steps are run
      working_directory: ~/meeshkan
      docker: # run the steps with Docker
        # CircleCI Python images available at: https://hub.docker.com/r/circleci/python/
        - image: circleci/python:3.6.4-stretch
          environment: # environment variables for primary container
            PIPENV_VENV_IN_PROJECT: "true"
      steps: # steps that comprise the `build` job
        - checkout # check out source code to working directory
        - run: sudo chown -R circleci:circleci /usr/local/bin
        - run: sudo chown -R circleci:circleci /usr/local/lib/python3.6/site-packages
        - run:
            name: Install tshark
            command: |
              sudo apt-get update
              sudo apt-get dist-upgrade
              sudo apt-get install -y tshark
        - run:
            name: Install Node.js and yarn
            command: |
              curl -sL https://deb.nodesource.com/setup_10.x | sudo bash -
              sudo apt-get install -y nodejs
              curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
              echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
              sudo apt update && sudo apt install yarn
        - restore_cache:
            # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
            key: deps9-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
        - run:
            name: Install pipenv
            command: |
              sudo pip install pipenv
              pipenv install -e .[dev]
              pipenv update
        - save_cache: # cache Python dependencies using checksum of Pipfile as the cache-key
            key: deps9-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
            paths:
              - ".venv"
              - "/usr/local/bin"
              - "/usr/local/lib/python3.6/site-packages"
        - run:
            name: Run pytest
            command: |
              export VENV_HOME_DIR=$(pipenv --venv)
              source $VENV_HOME_DIR/bin/activate
              pytest -s
        - run:
            name: Install pyright and run typecheck
            command: |
              set +e
              echo 'export PATH=$(yarn global bin):$PATH' >> $BASH_ENV
              source $BASH_ENV
              yarn global add pyright
              export VENV_HOME_DIR=$(pipenv --venv)
              source $VENV_HOME_DIR/bin/activate
              pyright --lib
  test-3.7:
    <<: *test-template
    docker:
      - image: circleci/python:3.7.6-stretch
  test-3.8:
    <<: *test-template
    docker:
      - image: circleci/python:3.8.0a1-stretch